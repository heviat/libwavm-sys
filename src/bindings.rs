/* automatically generated by rust-bindgen 0.60.1 */

pub const _VCRT_COMPILER_PREPROCESSOR: u32 = 1;
pub const _SAL_VERSION: u32 = 20;
pub const __SAL_H_VERSION: u32 = 180000000;
pub const _USE_DECLSPECS_FOR_SAL: u32 = 0;
pub const _USE_ATTRIBUTES_FOR_SAL: u32 = 0;
pub const _CRT_PACKING: u32 = 8;
pub const _HAS_EXCEPTIONS: u32 = 1;
pub const _STL_LANG: u32 = 0;
pub const _HAS_CXX17: u32 = 0;
pub const _HAS_CXX20: u32 = 0;
pub const _HAS_CXX23: u32 = 0;
pub const _HAS_NODISCARD: u32 = 0;
pub const _ARGMAX: u32 = 100;
pub const _CRT_INT_MAX: u32 = 2147483647;
pub const _CRT_FUNCTIONS_REQUIRED: u32 = 1;
pub const _CRT_HAS_CXX17: u32 = 0;
pub const _ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE: u32 = 1;
pub const _CRT_BUILD_DESKTOP_APP: u32 = 1;
pub const _CRT_INTERNAL_NONSTDC_NAMES: u32 = 1;
pub const __STDC_SECURE_LIB__: u32 = 200411;
pub const __GOT_SECURE_LIB__: u32 = 200411;
pub const __STDC_WANT_SECURE_LIB__: u32 = 1;
pub const _SECURECRT_FILL_BUFFER_PATTERN: u32 = 254;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES: u32 = 1;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY: u32 = 0;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const WCHAR_MIN: u32 = 0;
pub const WCHAR_MAX: u32 = 65535;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 65535;
pub type va_list = *mut ::std::os::raw::c_char;
extern "C" {
    pub fn __va_start(arg1: *mut *mut ::std::os::raw::c_char, ...);
}
pub type size_t = ::std::os::raw::c_ulonglong;
pub type __vcrt_bool = bool;
pub type wchar_t = ::std::os::raw::c_ushort;
extern "C" {
    pub fn __security_init_cookie();
}
extern "C" {
    pub fn __security_check_cookie(_StackCookie: usize);
}
extern "C" {
    pub fn __report_gsfailure(_StackCookie: usize);
}
extern "C" {
    pub static mut __security_cookie: usize;
}
pub type __crt_bool = bool;
extern "C" {
    pub fn _invalid_parameter_noinfo();
}
extern "C" {
    pub fn _invalid_parameter_noinfo_noreturn();
}
extern "C" {
    pub fn _invoke_watson(
        _Expression: *const wchar_t,
        _FunctionName: *const wchar_t,
        _FileName: *const wchar_t,
        _LineNo: ::std::os::raw::c_uint,
        _Reserved: usize,
    );
}
pub type errno_t = ::std::os::raw::c_int;
pub type wint_t = ::std::os::raw::c_ushort;
pub type wctype_t = ::std::os::raw::c_ushort;
pub type __time32_t = ::std::os::raw::c_long;
pub type __time64_t = ::std::os::raw::c_longlong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data_public {
    pub _locale_pctype: *const ::std::os::raw::c_ushort,
    pub _locale_mb_cur_max: ::std::os::raw::c_int,
    pub _locale_lc_codepage: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___crt_locale_data_public() {
    assert_eq!(
        ::std::mem::size_of::<__crt_locale_data_public>(),
        16usize,
        concat!("Size of: ", stringify!(__crt_locale_data_public))
    );
    assert_eq!(
        ::std::mem::align_of::<__crt_locale_data_public>(),
        8usize,
        concat!("Alignment of ", stringify!(__crt_locale_data_public))
    );
    fn test_field__locale_pctype() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__crt_locale_data_public>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._locale_pctype) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__crt_locale_data_public),
                "::",
                stringify!(_locale_pctype)
            )
        );
    }
    test_field__locale_pctype();
    fn test_field__locale_mb_cur_max() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__crt_locale_data_public>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._locale_mb_cur_max) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__crt_locale_data_public),
                "::",
                stringify!(_locale_mb_cur_max)
            )
        );
    }
    test_field__locale_mb_cur_max();
    fn test_field__locale_lc_codepage() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__crt_locale_data_public>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._locale_lc_codepage) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(__crt_locale_data_public),
                "::",
                stringify!(_locale_lc_codepage)
            )
        );
    }
    test_field__locale_lc_codepage();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_pointers {
    pub locinfo: *mut __crt_locale_data,
    pub mbcinfo: *mut __crt_multibyte_data,
}
#[test]
fn bindgen_test_layout___crt_locale_pointers() {
    assert_eq!(
        ::std::mem::size_of::<__crt_locale_pointers>(),
        16usize,
        concat!("Size of: ", stringify!(__crt_locale_pointers))
    );
    assert_eq!(
        ::std::mem::align_of::<__crt_locale_pointers>(),
        8usize,
        concat!("Alignment of ", stringify!(__crt_locale_pointers))
    );
    fn test_field_locinfo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__crt_locale_pointers>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).locinfo) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__crt_locale_pointers),
                "::",
                stringify!(locinfo)
            )
        );
    }
    test_field_locinfo();
    fn test_field_mbcinfo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__crt_locale_pointers>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mbcinfo) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__crt_locale_pointers),
                "::",
                stringify!(mbcinfo)
            )
        );
    }
    test_field_mbcinfo();
}
pub type _locale_t = *mut __crt_locale_pointers;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _Mbstatet {
    pub _Wchar: ::std::os::raw::c_ulong,
    pub _Byte: ::std::os::raw::c_ushort,
    pub _State: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout__Mbstatet() {
    assert_eq!(
        ::std::mem::size_of::<_Mbstatet>(),
        8usize,
        concat!("Size of: ", stringify!(_Mbstatet))
    );
    assert_eq!(
        ::std::mem::align_of::<_Mbstatet>(),
        4usize,
        concat!("Alignment of ", stringify!(_Mbstatet))
    );
    fn test_field__Wchar() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_Mbstatet>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._Wchar) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_Mbstatet),
                "::",
                stringify!(_Wchar)
            )
        );
    }
    test_field__Wchar();
    fn test_field__Byte() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_Mbstatet>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._Byte) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(_Mbstatet),
                "::",
                stringify!(_Byte)
            )
        );
    }
    test_field__Byte();
    fn test_field__State() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_Mbstatet>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._State) as usize - ptr as usize
            },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(_Mbstatet),
                "::",
                stringify!(_State)
            )
        );
    }
    test_field__State();
}
pub type mbstate_t = _Mbstatet;
pub type time_t = __time64_t;
pub type rsize_t = size_t;
extern "C" {
    pub fn _wassert(_Message: *const wchar_t, _File: *const wchar_t, _Line: ::std::os::raw::c_uint);
}
pub type max_align_t = f64;
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_longlong;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulonglong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_int;
pub type int_fast32_t = ::std::os::raw::c_int;
pub type int_fast64_t = ::std::os::raw::c_longlong;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_uint;
pub type uint_fast32_t = ::std::os::raw::c_uint;
pub type uint_fast64_t = ::std::os::raw::c_ulonglong;
pub type intmax_t = ::std::os::raw::c_longlong;
pub type uintmax_t = ::std::os::raw::c_ulonglong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wasm_config_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wasm_engine_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wasm_compartment_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wasm_store_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wasm_valtype_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wasm_functype_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wasm_tabletype_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wasm_memorytype_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wasm_globaltype_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wasm_externtype_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wasm_ref_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wasm_trap_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wasm_foreign_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wasm_module_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wasm_func_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wasm_table_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wasm_memory_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wasm_global_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wasm_extern_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wasm_instance_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wasm_shared_module_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wasm_shared_func_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wasm_shared_table_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wasm_shared_memory_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wasm_shared_foreign_t {
    _unused: [u8; 0],
}
#[doc = ""]
pub type wasm_float32_t = f32;
pub type wasm_float64_t = f64;
extern "C" {
    pub fn wasm_config_delete(arg1: *mut wasm_config_t);
}
extern "C" {
    #[doc = ""]
    pub fn wasm_config_new() -> *mut wasm_config_t;
}
extern "C" {
    pub fn wasm_config_feature_set_import_export_mutable_globals(
        config: *mut wasm_config_t,
        enable: bool,
    );
}
extern "C" {
    pub fn wasm_config_feature_set_nontrapping_float_to_int(
        config: *mut wasm_config_t,
        enable: bool,
    );
}
extern "C" {
    pub fn wasm_config_feature_set_sign_extension(config: *mut wasm_config_t, enable: bool);
}
extern "C" {
    pub fn wasm_config_feature_set_bulk_memory_ops(config: *mut wasm_config_t, enable: bool);
}
extern "C" {
    pub fn wasm_config_feature_set_simd(config: *mut wasm_config_t, enable: bool);
}
extern "C" {
    pub fn wasm_config_feature_set_atomics(config: *mut wasm_config_t, enable: bool);
}
extern "C" {
    pub fn wasm_config_feature_set_exception_handling(config: *mut wasm_config_t, enable: bool);
}
extern "C" {
    pub fn wasm_config_feature_set_multivalue(config: *mut wasm_config_t, enable: bool);
}
extern "C" {
    pub fn wasm_config_feature_set_reference_types(config: *mut wasm_config_t, enable: bool);
}
extern "C" {
    pub fn wasm_config_feature_set_extended_name_section(config: *mut wasm_config_t, enable: bool);
}
extern "C" {
    pub fn wasm_config_feature_set_multimemory(config: *mut wasm_config_t, enable: bool);
}
extern "C" {
    pub fn wasm_config_feature_set_shared_tables(config: *mut wasm_config_t, enable: bool);
}
extern "C" {
    pub fn wasm_config_feature_set_allow_legacy_inst_names(
        config: *mut wasm_config_t,
        enable: bool,
    );
}
extern "C" {
    pub fn wasm_config_feature_set_any_extern_kind_elems(config: *mut wasm_config_t, enable: bool);
}
extern "C" {
    pub fn wasm_config_feature_set_wat_quoted_names(config: *mut wasm_config_t, enable: bool);
}
extern "C" {
    pub fn wasm_config_feature_set_wat_custom_sections(config: *mut wasm_config_t, enable: bool);
}
extern "C" {
    pub fn wasm_engine_delete(arg1: *mut wasm_engine_t);
}
extern "C" {
    pub fn wasm_engine_new() -> *mut wasm_engine_t;
}
extern "C" {
    pub fn wasm_engine_new_with_config(arg1: *mut wasm_config_t) -> *mut wasm_engine_t;
}
extern "C" {
    pub fn wasm_compartment_delete(arg1: *mut wasm_compartment_t);
}
extern "C" {
    pub fn wasm_compartment_new(
        engine: *mut wasm_engine_t,
        debug_name: *const ::std::os::raw::c_char,
    ) -> *mut wasm_compartment_t;
}
extern "C" {
    pub fn wasm_compartment_clone(arg1: *const wasm_compartment_t) -> *mut wasm_compartment_t;
}
extern "C" {
    pub fn wasm_compartment_contains(
        arg1: *const wasm_compartment_t,
        arg2: *const wasm_ref_t,
    ) -> bool;
}
extern "C" {
    pub fn wasm_store_delete(arg1: *mut wasm_store_t);
}
extern "C" {
    pub fn wasm_store_new(
        arg1: *mut wasm_compartment_t,
        debug_name: *const ::std::os::raw::c_char,
    ) -> *mut wasm_store_t;
}
#[doc = ""]
pub type wasm_mutability_t = u8;
pub const wasm_mutability_enum_WASM_CONST: wasm_mutability_enum = 0;
pub const wasm_mutability_enum_WASM_VAR: wasm_mutability_enum = 1;
pub type wasm_mutability_enum = ::std::os::raw::c_int;
pub type wasm_shared_t = u8;
pub const wasm_shared_enum_WASM_NOTSHARED: wasm_shared_enum = 0;
pub const wasm_shared_enum_WASM_SHARED: wasm_shared_enum = 1;
pub type wasm_shared_enum = ::std::os::raw::c_int;
pub type wasm_index_t = u8;
pub const wasm_index_enum_WASM_INDEX_I32: wasm_index_enum = 0;
pub const wasm_index_enum_WASM_INDEX_I64: wasm_index_enum = 1;
pub type wasm_index_enum = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wasm_limits_t {
    pub min: u32,
    pub max: u32,
}
#[test]
fn bindgen_test_layout_wasm_limits_t() {
    assert_eq!(
        ::std::mem::size_of::<wasm_limits_t>(),
        8usize,
        concat!("Size of: ", stringify!(wasm_limits_t))
    );
    assert_eq!(
        ::std::mem::align_of::<wasm_limits_t>(),
        4usize,
        concat!("Alignment of ", stringify!(wasm_limits_t))
    );
    fn test_field_min() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<wasm_limits_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).min) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(wasm_limits_t),
                "::",
                stringify!(min)
            )
        );
    }
    test_field_min();
    fn test_field_max() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<wasm_limits_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).max) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(wasm_limits_t),
                "::",
                stringify!(max)
            )
        );
    }
    test_field_max();
}
pub const wasm_limits_max_default: u32 = 4294967295;
extern "C" {
    pub fn wasm_valtype_delete(arg1: *mut wasm_valtype_t);
}
extern "C" {
    pub fn wasm_valtype_copy(arg1: *mut wasm_valtype_t) -> *mut wasm_valtype_t;
}
pub type wasm_valkind_t = u8;
pub const wasm_valkind_enum_WASM_I32: wasm_valkind_enum = 0;
pub const wasm_valkind_enum_WASM_I64: wasm_valkind_enum = 1;
pub const wasm_valkind_enum_WASM_F32: wasm_valkind_enum = 2;
pub const wasm_valkind_enum_WASM_F64: wasm_valkind_enum = 3;
pub const wasm_valkind_enum_WASM_V128: wasm_valkind_enum = 4;
pub const wasm_valkind_enum_WASM_ANYREF: wasm_valkind_enum = 128;
pub const wasm_valkind_enum_WASM_FUNCREF: wasm_valkind_enum = 129;
pub type wasm_valkind_enum = ::std::os::raw::c_int;
extern "C" {
    pub fn wasm_valtype_new(arg1: wasm_valkind_t) -> *mut wasm_valtype_t;
}
extern "C" {
    pub fn wasm_valtype_kind(arg1: *const wasm_valtype_t) -> wasm_valkind_t;
}
extern "C" {
    pub fn wasm_functype_delete(arg1: *mut wasm_functype_t);
}
extern "C" {
    pub fn wasm_functype_copy(arg1: *mut wasm_functype_t) -> *mut wasm_functype_t;
}
extern "C" {
    pub fn wasm_functype_new(
        params: *mut *mut wasm_valtype_t,
        num_params: size_t,
        results: *mut *mut wasm_valtype_t,
        num_results: size_t,
    ) -> *mut wasm_functype_t;
}
extern "C" {
    pub fn wasm_functype_num_params(type_: *const wasm_functype_t) -> size_t;
}
extern "C" {
    pub fn wasm_functype_param(type_: *const wasm_functype_t, index: size_t)
        -> *mut wasm_valtype_t;
}
extern "C" {
    pub fn wasm_functype_num_results(type_: *const wasm_functype_t) -> size_t;
}
extern "C" {
    pub fn wasm_functype_result(
        type_: *const wasm_functype_t,
        index: size_t,
    ) -> *mut wasm_valtype_t;
}
extern "C" {
    pub fn wasm_globaltype_delete(arg1: *mut wasm_globaltype_t);
}
extern "C" {
    pub fn wasm_globaltype_copy(arg1: *mut wasm_globaltype_t) -> *mut wasm_globaltype_t;
}
extern "C" {
    pub fn wasm_globaltype_new(
        arg1: *mut wasm_valtype_t,
        arg2: wasm_mutability_t,
    ) -> *mut wasm_globaltype_t;
}
extern "C" {
    pub fn wasm_globaltype_content(arg1: *const wasm_globaltype_t) -> *const wasm_valtype_t;
}
extern "C" {
    pub fn wasm_globaltype_mutability(arg1: *const wasm_globaltype_t) -> wasm_mutability_t;
}
extern "C" {
    pub fn wasm_tabletype_delete(arg1: *mut wasm_tabletype_t);
}
extern "C" {
    pub fn wasm_tabletype_copy(arg1: *mut wasm_tabletype_t) -> *mut wasm_tabletype_t;
}
extern "C" {
    pub fn wasm_tabletype_new(
        arg1: *mut wasm_valtype_t,
        arg2: *const wasm_limits_t,
        arg3: wasm_shared_t,
        arg4: wasm_index_t,
    ) -> *mut wasm_tabletype_t;
}
extern "C" {
    pub fn wasm_tabletype_element(arg1: *const wasm_tabletype_t) -> *const wasm_valtype_t;
}
extern "C" {
    pub fn wasm_tabletype_limits(arg1: *const wasm_tabletype_t) -> *const wasm_limits_t;
}
extern "C" {
    pub fn wasm_tabletype_shared(arg1: *const wasm_tabletype_t) -> wasm_shared_t;
}
extern "C" {
    pub fn wasm_tabletype_index(arg1: *const wasm_tabletype_t) -> wasm_index_t;
}
extern "C" {
    pub fn wasm_memorytype_delete(arg1: *mut wasm_memorytype_t);
}
extern "C" {
    pub fn wasm_memorytype_copy(arg1: *mut wasm_memorytype_t) -> *mut wasm_memorytype_t;
}
extern "C" {
    pub fn wasm_memorytype_new(
        arg1: *const wasm_limits_t,
        arg2: wasm_shared_t,
        arg3: wasm_index_t,
    ) -> *mut wasm_memorytype_t;
}
extern "C" {
    pub fn wasm_memorytype_limits(arg1: *const wasm_memorytype_t) -> *const wasm_limits_t;
}
extern "C" {
    pub fn wasm_memorytype_shared(arg1: *const wasm_memorytype_t) -> wasm_shared_t;
}
extern "C" {
    pub fn wasm_memorytype_index(arg1: *const wasm_memorytype_t) -> wasm_index_t;
}
extern "C" {
    pub fn wasm_externtype_delete(arg1: *mut wasm_externtype_t);
}
extern "C" {
    pub fn wasm_externtype_copy(arg1: *mut wasm_externtype_t) -> *mut wasm_externtype_t;
}
pub type wasm_externkind_t = u8;
pub const wasm_externkind_enum_WASM_EXTERN_FUNC: wasm_externkind_enum = 0;
pub const wasm_externkind_enum_WASM_EXTERN_GLOBAL: wasm_externkind_enum = 1;
pub const wasm_externkind_enum_WASM_EXTERN_TABLE: wasm_externkind_enum = 2;
pub const wasm_externkind_enum_WASM_EXTERN_MEMORY: wasm_externkind_enum = 3;
pub type wasm_externkind_enum = ::std::os::raw::c_int;
extern "C" {
    pub fn wasm_externtype_kind(arg1: *const wasm_externtype_t) -> wasm_externkind_t;
}
extern "C" {
    pub fn wasm_functype_as_externtype(arg1: *mut wasm_functype_t) -> *mut wasm_externtype_t;
}
extern "C" {
    pub fn wasm_globaltype_as_externtype(arg1: *mut wasm_globaltype_t) -> *mut wasm_externtype_t;
}
extern "C" {
    pub fn wasm_tabletype_as_externtype(arg1: *mut wasm_tabletype_t) -> *mut wasm_externtype_t;
}
extern "C" {
    pub fn wasm_memorytype_as_externtype(arg1: *mut wasm_memorytype_t) -> *mut wasm_externtype_t;
}
extern "C" {
    pub fn wasm_externtype_as_functype(arg1: *mut wasm_externtype_t) -> *mut wasm_functype_t;
}
extern "C" {
    pub fn wasm_externtype_as_globaltype(arg1: *mut wasm_externtype_t) -> *mut wasm_globaltype_t;
}
extern "C" {
    pub fn wasm_externtype_as_tabletype(arg1: *mut wasm_externtype_t) -> *mut wasm_tabletype_t;
}
extern "C" {
    pub fn wasm_externtype_as_memorytype(arg1: *mut wasm_externtype_t) -> *mut wasm_memorytype_t;
}
extern "C" {
    pub fn wasm_functype_as_externtype_const(
        arg1: *const wasm_functype_t,
    ) -> *const wasm_externtype_t;
}
extern "C" {
    pub fn wasm_globaltype_as_externtype_const(
        arg1: *const wasm_globaltype_t,
    ) -> *const wasm_externtype_t;
}
extern "C" {
    pub fn wasm_tabletype_as_externtype_const(
        arg1: *const wasm_tabletype_t,
    ) -> *const wasm_externtype_t;
}
extern "C" {
    pub fn wasm_memorytype_as_externtype_const(
        arg1: *const wasm_memorytype_t,
    ) -> *const wasm_externtype_t;
}
extern "C" {
    pub fn wasm_externtype_as_functype_const(
        arg1: *const wasm_externtype_t,
    ) -> *const wasm_functype_t;
}
extern "C" {
    pub fn wasm_externtype_as_globaltype_const(
        arg1: *const wasm_externtype_t,
    ) -> *const wasm_globaltype_t;
}
extern "C" {
    pub fn wasm_externtype_as_tabletype_const(
        arg1: *const wasm_externtype_t,
    ) -> *const wasm_tabletype_t;
}
extern "C" {
    pub fn wasm_externtype_as_memorytype_const(
        arg1: *const wasm_externtype_t,
    ) -> *const wasm_memorytype_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wasm_import_t {
    pub module: *const ::std::os::raw::c_char,
    pub num_module_bytes: size_t,
    pub name: *const ::std::os::raw::c_char,
    pub num_name_bytes: size_t,
    pub type_: *mut wasm_externtype_t,
}
#[test]
fn bindgen_test_layout_wasm_import_t() {
    assert_eq!(
        ::std::mem::size_of::<wasm_import_t>(),
        40usize,
        concat!("Size of: ", stringify!(wasm_import_t))
    );
    assert_eq!(
        ::std::mem::align_of::<wasm_import_t>(),
        8usize,
        concat!("Alignment of ", stringify!(wasm_import_t))
    );
    fn test_field_module() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<wasm_import_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).module) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(wasm_import_t),
                "::",
                stringify!(module)
            )
        );
    }
    test_field_module();
    fn test_field_num_module_bytes() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<wasm_import_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).num_module_bytes) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(wasm_import_t),
                "::",
                stringify!(num_module_bytes)
            )
        );
    }
    test_field_num_module_bytes();
    fn test_field_name() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<wasm_import_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(wasm_import_t),
                "::",
                stringify!(name)
            )
        );
    }
    test_field_name();
    fn test_field_num_name_bytes() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<wasm_import_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).num_name_bytes) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(wasm_import_t),
                "::",
                stringify!(num_name_bytes)
            )
        );
    }
    test_field_num_name_bytes();
    fn test_field_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<wasm_import_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(wasm_import_t),
                "::",
                stringify!(type_)
            )
        );
    }
    test_field_type();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wasm_export_t {
    pub name: *const ::std::os::raw::c_char,
    pub num_name_bytes: size_t,
    pub type_: *mut wasm_externtype_t,
}
#[test]
fn bindgen_test_layout_wasm_export_t() {
    assert_eq!(
        ::std::mem::size_of::<wasm_export_t>(),
        24usize,
        concat!("Size of: ", stringify!(wasm_export_t))
    );
    assert_eq!(
        ::std::mem::align_of::<wasm_export_t>(),
        8usize,
        concat!("Alignment of ", stringify!(wasm_export_t))
    );
    fn test_field_name() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<wasm_export_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(wasm_export_t),
                "::",
                stringify!(name)
            )
        );
    }
    test_field_name();
    fn test_field_num_name_bytes() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<wasm_export_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).num_name_bytes) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(wasm_export_t),
                "::",
                stringify!(num_name_bytes)
            )
        );
    }
    test_field_num_name_bytes();
    fn test_field_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<wasm_export_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(wasm_export_t),
                "::",
                stringify!(type_)
            )
        );
    }
    test_field_type();
}
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wasm_v128_t {
    pub u64x2: [u64; 2usize],
}
#[test]
fn bindgen_test_layout_wasm_v128_t() {
    assert_eq!(
        ::std::mem::size_of::<wasm_v128_t>(),
        16usize,
        concat!("Size of: ", stringify!(wasm_v128_t))
    );
    assert_eq!(
        ::std::mem::align_of::<wasm_v128_t>(),
        8usize,
        concat!("Alignment of ", stringify!(wasm_v128_t))
    );
    fn test_field_u64x2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<wasm_v128_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).u64x2) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(wasm_v128_t),
                "::",
                stringify!(u64x2)
            )
        );
    }
    test_field_u64x2();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union wasm_val_t {
    pub i32_: i32,
    pub i64_: i64,
    pub f32_: wasm_float32_t,
    pub f64_: wasm_float64_t,
    pub v128: wasm_v128_t,
    pub ref_: *mut wasm_ref_t,
}
#[test]
fn bindgen_test_layout_wasm_val_t() {
    assert_eq!(
        ::std::mem::size_of::<wasm_val_t>(),
        16usize,
        concat!("Size of: ", stringify!(wasm_val_t))
    );
    assert_eq!(
        ::std::mem::align_of::<wasm_val_t>(),
        8usize,
        concat!("Alignment of ", stringify!(wasm_val_t))
    );
    fn test_field_i32() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<wasm_val_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).i32_) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(wasm_val_t),
                "::",
                stringify!(i32_)
            )
        );
    }
    test_field_i32();
    fn test_field_i64() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<wasm_val_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).i64_) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(wasm_val_t),
                "::",
                stringify!(i64_)
            )
        );
    }
    test_field_i64();
    fn test_field_f32() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<wasm_val_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).f32_) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(wasm_val_t),
                "::",
                stringify!(f32_)
            )
        );
    }
    test_field_f32();
    fn test_field_f64() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<wasm_val_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).f64_) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(wasm_val_t),
                "::",
                stringify!(f64_)
            )
        );
    }
    test_field_f64();
    fn test_field_v128() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<wasm_val_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).v128) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(wasm_val_t),
                "::",
                stringify!(v128)
            )
        );
    }
    test_field_v128();
    fn test_field_ref() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<wasm_val_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ref_) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(wasm_val_t),
                "::",
                stringify!(ref_)
            )
        );
    }
    test_field_ref();
}
extern "C" {
    pub fn wasm_val_delete(kind: wasm_valkind_t, v: *mut wasm_val_t);
}
extern "C" {
    pub fn wasm_val_copy(kind: wasm_valkind_t, out: *mut wasm_val_t, arg1: *const wasm_val_t);
}
extern "C" {
    pub fn wasm_ref_delete(arg1: *mut wasm_ref_t);
}
extern "C" {
    pub fn wasm_ref_copy(arg1: *const wasm_ref_t) -> *mut wasm_ref_t;
}
extern "C" {
    pub fn wasm_ref_same(arg1: *const wasm_ref_t, arg2: *const wasm_ref_t) -> bool;
}
extern "C" {
    pub fn wasm_ref_get_host_info(arg1: *const wasm_ref_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn wasm_ref_set_host_info(arg1: *mut wasm_ref_t, arg2: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn wasm_ref_set_host_info_with_finalizer(
        arg1: *mut wasm_ref_t,
        arg2: *mut ::std::os::raw::c_void,
        arg3: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    );
}
extern "C" {
    pub fn wasm_ref_remap_to_cloned_compartment(
        arg1: *const wasm_ref_t,
        arg2: *const wasm_compartment_t,
    ) -> *mut wasm_ref_t;
}
extern "C" {
    pub fn wasm_ref_name(arg1: *const wasm_ref_t) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wasm_frame_t {
    pub function: *mut wasm_func_t,
    pub instr_index: size_t,
}
#[test]
fn bindgen_test_layout_wasm_frame_t() {
    assert_eq!(
        ::std::mem::size_of::<wasm_frame_t>(),
        16usize,
        concat!("Size of: ", stringify!(wasm_frame_t))
    );
    assert_eq!(
        ::std::mem::align_of::<wasm_frame_t>(),
        8usize,
        concat!("Alignment of ", stringify!(wasm_frame_t))
    );
    fn test_field_function() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<wasm_frame_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).function) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(wasm_frame_t),
                "::",
                stringify!(function)
            )
        );
    }
    test_field_function();
    fn test_field_instr_index() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<wasm_frame_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).instr_index) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(wasm_frame_t),
                "::",
                stringify!(instr_index)
            )
        );
    }
    test_field_instr_index();
}
extern "C" {
    pub fn wasm_trap_delete(arg1: *mut wasm_trap_t);
}
extern "C" {
    pub fn wasm_trap_copy(arg1: *const wasm_trap_t) -> *mut wasm_trap_t;
}
extern "C" {
    pub fn wasm_trap_same(arg1: *const wasm_trap_t, arg2: *const wasm_trap_t) -> bool;
}
extern "C" {
    pub fn wasm_trap_get_host_info(arg1: *const wasm_trap_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn wasm_trap_set_host_info(arg1: *mut wasm_trap_t, arg2: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn wasm_trap_set_host_info_with_finalizer(
        arg1: *mut wasm_trap_t,
        arg2: *mut ::std::os::raw::c_void,
        arg3: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    );
}
extern "C" {
    pub fn wasm_trap_remap_to_cloned_compartment(
        arg1: *const wasm_trap_t,
        arg2: *const wasm_compartment_t,
    ) -> *mut wasm_trap_t;
}
extern "C" {
    pub fn wasm_trap_name(arg1: *const wasm_trap_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn wasm_trap_as_ref(arg1: *mut wasm_trap_t) -> *mut wasm_ref_t;
}
extern "C" {
    pub fn wasm_ref_as_trap(arg1: *mut wasm_ref_t) -> *mut wasm_trap_t;
}
extern "C" {
    pub fn wasm_trap_as_ref_const(arg1: *const wasm_trap_t) -> *const wasm_ref_t;
}
extern "C" {
    pub fn wasm_ref_as_trap_const(arg1: *const wasm_ref_t) -> *const wasm_trap_t;
}
extern "C" {
    pub fn wasm_trap_new(
        arg1: *mut wasm_compartment_t,
        message: *const ::std::os::raw::c_char,
        num_message_bytes: size_t,
    ) -> *mut wasm_trap_t;
}
extern "C" {
    pub fn wasm_trap_message(
        arg1: *const wasm_trap_t,
        out_message: *mut ::std::os::raw::c_char,
        inout_num_message_bytes: *mut size_t,
    ) -> bool;
}
extern "C" {
    pub fn wasm_trap_stack_num_frames(arg1: *const wasm_trap_t) -> size_t;
}
extern "C" {
    pub fn wasm_trap_stack_frame(
        arg1: *const wasm_trap_t,
        index: size_t,
        out_frame: *mut wasm_frame_t,
    );
}
extern "C" {
    pub fn wasm_foreign_delete(arg1: *mut wasm_foreign_t);
}
extern "C" {
    pub fn wasm_foreign_copy(arg1: *const wasm_foreign_t) -> *mut wasm_foreign_t;
}
extern "C" {
    pub fn wasm_foreign_same(arg1: *const wasm_foreign_t, arg2: *const wasm_foreign_t) -> bool;
}
extern "C" {
    pub fn wasm_foreign_get_host_info(arg1: *const wasm_foreign_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn wasm_foreign_set_host_info(arg1: *mut wasm_foreign_t, arg2: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn wasm_foreign_set_host_info_with_finalizer(
        arg1: *mut wasm_foreign_t,
        arg2: *mut ::std::os::raw::c_void,
        arg3: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    );
}
extern "C" {
    pub fn wasm_foreign_remap_to_cloned_compartment(
        arg1: *const wasm_foreign_t,
        arg2: *const wasm_compartment_t,
    ) -> *mut wasm_foreign_t;
}
extern "C" {
    pub fn wasm_foreign_name(arg1: *const wasm_foreign_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn wasm_foreign_as_ref(arg1: *mut wasm_foreign_t) -> *mut wasm_ref_t;
}
extern "C" {
    pub fn wasm_ref_as_foreign(arg1: *mut wasm_ref_t) -> *mut wasm_foreign_t;
}
extern "C" {
    pub fn wasm_foreign_as_ref_const(arg1: *const wasm_foreign_t) -> *const wasm_ref_t;
}
extern "C" {
    pub fn wasm_ref_as_foreign_const(arg1: *const wasm_ref_t) -> *const wasm_foreign_t;
}
extern "C" {
    pub fn wasm_shared_foreign_delete(arg1: *mut wasm_shared_foreign_t);
}
extern "C" {
    pub fn wasm_foreign_share(arg1: *const wasm_foreign_t) -> *mut wasm_shared_foreign_t;
}
extern "C" {
    pub fn wasm_foreign_obtain(
        arg1: *mut wasm_store_t,
        arg2: *const wasm_shared_foreign_t,
    ) -> *mut wasm_foreign_t;
}
extern "C" {
    pub fn wasm_foreign_new(
        arg1: *mut wasm_compartment_t,
        debug_name: *const ::std::os::raw::c_char,
    ) -> *mut wasm_foreign_t;
}
extern "C" {
    pub fn wasm_module_delete(arg1: *mut wasm_module_t);
}
extern "C" {
    pub fn wasm_module_copy(arg1: *mut wasm_module_t) -> *mut wasm_module_t;
}
extern "C" {
    pub fn wasm_module_new(
        arg1: *mut wasm_engine_t,
        binary: *const ::std::os::raw::c_char,
        num_binary_bytes: size_t,
    ) -> *mut wasm_module_t;
}
extern "C" {
    pub fn wasm_module_new_text(
        arg1: *mut wasm_engine_t,
        text: *const ::std::os::raw::c_char,
        num_text_chars: size_t,
    ) -> *mut wasm_module_t;
}
extern "C" {
    pub fn wasm_module_print(
        module: *const wasm_module_t,
        out_num_chars: *mut size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn wasm_module_validate(
        binary: *const ::std::os::raw::c_char,
        num_binary_bytes: size_t,
    ) -> bool;
}
extern "C" {
    pub fn wasm_module_num_imports(module: *const wasm_module_t) -> size_t;
}
extern "C" {
    pub fn wasm_module_import(
        module: *const wasm_module_t,
        index: size_t,
        out_import: *mut wasm_import_t,
    );
}
extern "C" {
    pub fn wasm_module_num_exports(module: *const wasm_module_t) -> size_t;
}
extern "C" {
    pub fn wasm_module_export(
        module: *const wasm_module_t,
        index: size_t,
        out_export: *mut wasm_export_t,
    );
}
extern "C" {
    pub fn wasm_func_delete(arg1: *mut wasm_func_t);
}
extern "C" {
    pub fn wasm_func_copy(arg1: *const wasm_func_t) -> *mut wasm_func_t;
}
extern "C" {
    pub fn wasm_func_same(arg1: *const wasm_func_t, arg2: *const wasm_func_t) -> bool;
}
extern "C" {
    pub fn wasm_func_get_host_info(arg1: *const wasm_func_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn wasm_func_set_host_info(arg1: *mut wasm_func_t, arg2: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn wasm_func_set_host_info_with_finalizer(
        arg1: *mut wasm_func_t,
        arg2: *mut ::std::os::raw::c_void,
        arg3: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    );
}
extern "C" {
    pub fn wasm_func_remap_to_cloned_compartment(
        arg1: *const wasm_func_t,
        arg2: *const wasm_compartment_t,
    ) -> *mut wasm_func_t;
}
extern "C" {
    pub fn wasm_func_name(arg1: *const wasm_func_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn wasm_func_as_ref(arg1: *mut wasm_func_t) -> *mut wasm_ref_t;
}
extern "C" {
    pub fn wasm_ref_as_func(arg1: *mut wasm_ref_t) -> *mut wasm_func_t;
}
extern "C" {
    pub fn wasm_func_as_ref_const(arg1: *const wasm_func_t) -> *const wasm_ref_t;
}
extern "C" {
    pub fn wasm_ref_as_func_const(arg1: *const wasm_ref_t) -> *const wasm_func_t;
}
extern "C" {
    pub fn wasm_shared_func_delete(arg1: *mut wasm_shared_func_t);
}
extern "C" {
    pub fn wasm_func_share(arg1: *const wasm_func_t) -> *mut wasm_shared_func_t;
}
extern "C" {
    pub fn wasm_func_obtain(
        arg1: *mut wasm_store_t,
        arg2: *const wasm_shared_func_t,
    ) -> *mut wasm_func_t;
}
pub type wasm_func_callback_t = ::std::option::Option<
    unsafe extern "C" fn(args: *const wasm_val_t, results: *mut wasm_val_t) -> *mut wasm_trap_t,
>;
pub type wasm_func_callback_with_env_t = ::std::option::Option<
    unsafe extern "C" fn(
        env: *mut ::std::os::raw::c_void,
        args: *const wasm_val_t,
        results: *mut wasm_val_t,
    ) -> *mut wasm_trap_t,
>;
extern "C" {
    pub fn wasm_func_new(
        arg1: *mut wasm_compartment_t,
        arg2: *const wasm_functype_t,
        arg3: wasm_func_callback_t,
        debug_name: *const ::std::os::raw::c_char,
    ) -> *mut wasm_func_t;
}
extern "C" {
    pub fn wasm_func_new_with_env(
        arg1: *mut wasm_compartment_t,
        type_: *const wasm_functype_t,
        arg2: wasm_func_callback_with_env_t,
        env: *mut ::std::os::raw::c_void,
        finalizer: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
        debug_name: *const ::std::os::raw::c_char,
    ) -> *mut wasm_func_t;
}
extern "C" {
    pub fn wasm_func_type(arg1: *const wasm_func_t) -> *mut wasm_functype_t;
}
extern "C" {
    pub fn wasm_func_param_arity(arg1: *const wasm_func_t) -> size_t;
}
extern "C" {
    pub fn wasm_func_result_arity(arg1: *const wasm_func_t) -> size_t;
}
extern "C" {
    pub fn wasm_func_call(
        arg1: *mut wasm_store_t,
        arg2: *const wasm_func_t,
        args: *const wasm_val_t,
        results: *mut wasm_val_t,
    ) -> *mut wasm_trap_t;
}
extern "C" {
    pub fn wasm_global_delete(arg1: *mut wasm_global_t);
}
extern "C" {
    pub fn wasm_global_copy(arg1: *const wasm_global_t) -> *mut wasm_global_t;
}
extern "C" {
    pub fn wasm_global_same(arg1: *const wasm_global_t, arg2: *const wasm_global_t) -> bool;
}
extern "C" {
    pub fn wasm_global_get_host_info(arg1: *const wasm_global_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn wasm_global_set_host_info(arg1: *mut wasm_global_t, arg2: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn wasm_global_set_host_info_with_finalizer(
        arg1: *mut wasm_global_t,
        arg2: *mut ::std::os::raw::c_void,
        arg3: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    );
}
extern "C" {
    pub fn wasm_global_remap_to_cloned_compartment(
        arg1: *const wasm_global_t,
        arg2: *const wasm_compartment_t,
    ) -> *mut wasm_global_t;
}
extern "C" {
    pub fn wasm_global_name(arg1: *const wasm_global_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn wasm_global_as_ref(arg1: *mut wasm_global_t) -> *mut wasm_ref_t;
}
extern "C" {
    pub fn wasm_ref_as_global(arg1: *mut wasm_ref_t) -> *mut wasm_global_t;
}
extern "C" {
    pub fn wasm_global_as_ref_const(arg1: *const wasm_global_t) -> *const wasm_ref_t;
}
extern "C" {
    pub fn wasm_ref_as_global_const(arg1: *const wasm_ref_t) -> *const wasm_global_t;
}
extern "C" {
    pub fn wasm_global_new(
        arg1: *mut wasm_compartment_t,
        arg2: *const wasm_globaltype_t,
        arg3: *const wasm_val_t,
        debug_name: *const ::std::os::raw::c_char,
    ) -> *mut wasm_global_t;
}
extern "C" {
    pub fn wasm_global_type(arg1: *const wasm_global_t) -> *mut wasm_globaltype_t;
}
extern "C" {
    pub fn wasm_global_get(
        arg1: *mut wasm_store_t,
        arg2: *const wasm_global_t,
        out: *mut wasm_val_t,
    );
}
extern "C" {
    pub fn wasm_global_set(arg1: *mut wasm_global_t, arg2: *const wasm_val_t);
}
extern "C" {
    pub fn wasm_table_delete(arg1: *mut wasm_table_t);
}
extern "C" {
    pub fn wasm_table_copy(arg1: *const wasm_table_t) -> *mut wasm_table_t;
}
extern "C" {
    pub fn wasm_table_same(arg1: *const wasm_table_t, arg2: *const wasm_table_t) -> bool;
}
extern "C" {
    pub fn wasm_table_get_host_info(arg1: *const wasm_table_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn wasm_table_set_host_info(arg1: *mut wasm_table_t, arg2: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn wasm_table_set_host_info_with_finalizer(
        arg1: *mut wasm_table_t,
        arg2: *mut ::std::os::raw::c_void,
        arg3: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    );
}
extern "C" {
    pub fn wasm_table_remap_to_cloned_compartment(
        arg1: *const wasm_table_t,
        arg2: *const wasm_compartment_t,
    ) -> *mut wasm_table_t;
}
extern "C" {
    pub fn wasm_table_name(arg1: *const wasm_table_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn wasm_table_as_ref(arg1: *mut wasm_table_t) -> *mut wasm_ref_t;
}
extern "C" {
    pub fn wasm_ref_as_table(arg1: *mut wasm_ref_t) -> *mut wasm_table_t;
}
extern "C" {
    pub fn wasm_table_as_ref_const(arg1: *const wasm_table_t) -> *const wasm_ref_t;
}
extern "C" {
    pub fn wasm_ref_as_table_const(arg1: *const wasm_ref_t) -> *const wasm_table_t;
}
extern "C" {
    pub fn wasm_shared_table_delete(arg1: *mut wasm_shared_table_t);
}
extern "C" {
    pub fn wasm_table_share(arg1: *const wasm_table_t) -> *mut wasm_shared_table_t;
}
extern "C" {
    pub fn wasm_table_obtain(
        arg1: *mut wasm_store_t,
        arg2: *const wasm_shared_table_t,
    ) -> *mut wasm_table_t;
}
pub type wasm_table_size_t = u32;
pub const WASM_TABLE_SIZE_MAX: wasm_table_size_t = 4294967295;
extern "C" {
    pub fn wasm_table_new(
        arg1: *mut wasm_compartment_t,
        arg2: *const wasm_tabletype_t,
        init: *mut wasm_ref_t,
        debug_name: *const ::std::os::raw::c_char,
    ) -> *mut wasm_table_t;
}
extern "C" {
    pub fn wasm_table_type(arg1: *const wasm_table_t) -> *mut wasm_tabletype_t;
}
extern "C" {
    pub fn wasm_table_get(table: *const wasm_table_t, index: wasm_table_size_t) -> *mut wasm_ref_t;
}
extern "C" {
    pub fn wasm_table_set(
        table: *mut wasm_table_t,
        index: wasm_table_size_t,
        value: *mut wasm_ref_t,
    ) -> bool;
}
extern "C" {
    pub fn wasm_table_size(table: *const wasm_table_t) -> wasm_table_size_t;
}
extern "C" {
    pub fn wasm_table_grow(
        table: *mut wasm_table_t,
        delta: wasm_table_size_t,
        init: *mut wasm_ref_t,
        out_previous_size: *mut wasm_table_size_t,
    ) -> bool;
}
extern "C" {
    pub fn wasm_memory_delete(arg1: *mut wasm_memory_t);
}
extern "C" {
    pub fn wasm_memory_copy(arg1: *const wasm_memory_t) -> *mut wasm_memory_t;
}
extern "C" {
    pub fn wasm_memory_same(arg1: *const wasm_memory_t, arg2: *const wasm_memory_t) -> bool;
}
extern "C" {
    pub fn wasm_memory_get_host_info(arg1: *const wasm_memory_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn wasm_memory_set_host_info(arg1: *mut wasm_memory_t, arg2: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn wasm_memory_set_host_info_with_finalizer(
        arg1: *mut wasm_memory_t,
        arg2: *mut ::std::os::raw::c_void,
        arg3: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    );
}
extern "C" {
    pub fn wasm_memory_remap_to_cloned_compartment(
        arg1: *const wasm_memory_t,
        arg2: *const wasm_compartment_t,
    ) -> *mut wasm_memory_t;
}
extern "C" {
    pub fn wasm_memory_name(arg1: *const wasm_memory_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn wasm_memory_as_ref(arg1: *mut wasm_memory_t) -> *mut wasm_ref_t;
}
extern "C" {
    pub fn wasm_ref_as_memory(arg1: *mut wasm_ref_t) -> *mut wasm_memory_t;
}
extern "C" {
    pub fn wasm_memory_as_ref_const(arg1: *const wasm_memory_t) -> *const wasm_ref_t;
}
extern "C" {
    pub fn wasm_ref_as_memory_const(arg1: *const wasm_ref_t) -> *const wasm_memory_t;
}
extern "C" {
    pub fn wasm_shared_memory_delete(arg1: *mut wasm_shared_memory_t);
}
extern "C" {
    pub fn wasm_memory_share(arg1: *const wasm_memory_t) -> *mut wasm_shared_memory_t;
}
extern "C" {
    pub fn wasm_memory_obtain(
        arg1: *mut wasm_store_t,
        arg2: *const wasm_shared_memory_t,
    ) -> *mut wasm_memory_t;
}
pub type wasm_memory_pages_t = u32;
pub const WASM_MEMORY_PAGES_MAX: wasm_memory_pages_t = 4294967295;
pub const MEMORY_PAGE_SIZE: size_t = 65536;
extern "C" {
    pub fn wasm_memory_new(
        arg1: *mut wasm_compartment_t,
        arg2: *const wasm_memorytype_t,
        debug_name: *const ::std::os::raw::c_char,
    ) -> *mut wasm_memory_t;
}
extern "C" {
    pub fn wasm_memory_type(arg1: *const wasm_memory_t) -> *mut wasm_memorytype_t;
}
extern "C" {
    pub fn wasm_memory_data(arg1: *mut wasm_memory_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn wasm_memory_data_size(arg1: *const wasm_memory_t) -> size_t;
}
extern "C" {
    pub fn wasm_memory_size(arg1: *const wasm_memory_t) -> wasm_memory_pages_t;
}
extern "C" {
    pub fn wasm_memory_grow(
        arg1: *mut wasm_memory_t,
        delta: wasm_memory_pages_t,
        out_previous_size: *mut wasm_memory_pages_t,
    ) -> bool;
}
extern "C" {
    pub fn wasm_extern_delete(arg1: *mut wasm_extern_t);
}
extern "C" {
    pub fn wasm_extern_copy(arg1: *const wasm_extern_t) -> *mut wasm_extern_t;
}
extern "C" {
    pub fn wasm_extern_same(arg1: *const wasm_extern_t, arg2: *const wasm_extern_t) -> bool;
}
extern "C" {
    pub fn wasm_extern_get_host_info(arg1: *const wasm_extern_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn wasm_extern_set_host_info(arg1: *mut wasm_extern_t, arg2: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn wasm_extern_set_host_info_with_finalizer(
        arg1: *mut wasm_extern_t,
        arg2: *mut ::std::os::raw::c_void,
        arg3: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    );
}
extern "C" {
    pub fn wasm_extern_remap_to_cloned_compartment(
        arg1: *const wasm_extern_t,
        arg2: *const wasm_compartment_t,
    ) -> *mut wasm_extern_t;
}
extern "C" {
    pub fn wasm_extern_name(arg1: *const wasm_extern_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn wasm_extern_as_ref(arg1: *mut wasm_extern_t) -> *mut wasm_ref_t;
}
extern "C" {
    pub fn wasm_ref_as_extern(arg1: *mut wasm_ref_t) -> *mut wasm_extern_t;
}
extern "C" {
    pub fn wasm_extern_as_ref_const(arg1: *const wasm_extern_t) -> *const wasm_ref_t;
}
extern "C" {
    pub fn wasm_ref_as_extern_const(arg1: *const wasm_ref_t) -> *const wasm_extern_t;
}
extern "C" {
    pub fn wasm_extern_kind(arg1: *const wasm_extern_t) -> wasm_externkind_t;
}
extern "C" {
    pub fn wasm_extern_type(arg1: *const wasm_extern_t) -> *mut wasm_externtype_t;
}
extern "C" {
    pub fn wasm_func_as_extern(arg1: *mut wasm_func_t) -> *mut wasm_extern_t;
}
extern "C" {
    pub fn wasm_global_as_extern(arg1: *mut wasm_global_t) -> *mut wasm_extern_t;
}
extern "C" {
    pub fn wasm_table_as_extern(arg1: *mut wasm_table_t) -> *mut wasm_extern_t;
}
extern "C" {
    pub fn wasm_memory_as_extern(arg1: *mut wasm_memory_t) -> *mut wasm_extern_t;
}
extern "C" {
    pub fn wasm_extern_as_func(arg1: *mut wasm_extern_t) -> *mut wasm_func_t;
}
extern "C" {
    pub fn wasm_extern_as_global(arg1: *mut wasm_extern_t) -> *mut wasm_global_t;
}
extern "C" {
    pub fn wasm_extern_as_table(arg1: *mut wasm_extern_t) -> *mut wasm_table_t;
}
extern "C" {
    pub fn wasm_extern_as_memory(arg1: *mut wasm_extern_t) -> *mut wasm_memory_t;
}
extern "C" {
    pub fn wasm_func_as_extern_const(arg1: *const wasm_func_t) -> *const wasm_extern_t;
}
extern "C" {
    pub fn wasm_global_as_extern_const(arg1: *const wasm_global_t) -> *const wasm_extern_t;
}
extern "C" {
    pub fn wasm_table_as_extern_const(arg1: *const wasm_table_t) -> *const wasm_extern_t;
}
extern "C" {
    pub fn wasm_memory_as_extern_const(arg1: *const wasm_memory_t) -> *const wasm_extern_t;
}
extern "C" {
    pub fn wasm_extern_as_func_const(arg1: *const wasm_extern_t) -> *const wasm_func_t;
}
extern "C" {
    pub fn wasm_extern_as_global_const(arg1: *const wasm_extern_t) -> *const wasm_global_t;
}
extern "C" {
    pub fn wasm_extern_as_table_const(arg1: *const wasm_extern_t) -> *const wasm_table_t;
}
extern "C" {
    pub fn wasm_extern_as_memory_const(arg1: *const wasm_extern_t) -> *const wasm_memory_t;
}
extern "C" {
    pub fn wasm_instance_delete(arg1: *mut wasm_instance_t);
}
extern "C" {
    pub fn wasm_instance_copy(arg1: *const wasm_instance_t) -> *mut wasm_instance_t;
}
extern "C" {
    pub fn wasm_instance_same(arg1: *const wasm_instance_t, arg2: *const wasm_instance_t) -> bool;
}
extern "C" {
    pub fn wasm_instance_get_host_info(arg1: *const wasm_instance_t)
        -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn wasm_instance_set_host_info(
        arg1: *mut wasm_instance_t,
        arg2: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn wasm_instance_set_host_info_with_finalizer(
        arg1: *mut wasm_instance_t,
        arg2: *mut ::std::os::raw::c_void,
        arg3: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    );
}
extern "C" {
    pub fn wasm_instance_remap_to_cloned_compartment(
        arg1: *const wasm_instance_t,
        arg2: *const wasm_compartment_t,
    ) -> *mut wasm_instance_t;
}
extern "C" {
    pub fn wasm_instance_name(arg1: *const wasm_instance_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn wasm_instance_as_ref(arg1: *mut wasm_instance_t) -> *mut wasm_ref_t;
}
extern "C" {
    pub fn wasm_ref_as_instance(arg1: *mut wasm_ref_t) -> *mut wasm_instance_t;
}
extern "C" {
    pub fn wasm_instance_as_ref_const(arg1: *const wasm_instance_t) -> *const wasm_ref_t;
}
extern "C" {
    pub fn wasm_ref_as_instance_const(arg1: *const wasm_ref_t) -> *const wasm_instance_t;
}
extern "C" {
    pub fn wasm_instance_new(
        arg1: *mut wasm_store_t,
        arg2: *const wasm_module_t,
        imports: *const *const wasm_extern_t,
        arg3: *mut *mut wasm_trap_t,
        debug_name: *const ::std::os::raw::c_char,
    ) -> *mut wasm_instance_t;
}
extern "C" {
    pub fn wasm_instance_num_exports(arg1: *const wasm_instance_t) -> size_t;
}
extern "C" {
    pub fn wasm_instance_export(arg1: *const wasm_instance_t, index: size_t) -> *mut wasm_extern_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_multibyte_data {
    pub _address: u8,
}
